{
  "paragraphs": {
    "0": [
      {
        "id": 0,
        "tag": "h2",
        "content": "Développement d'un CMS Laravel-VueJS"
      },
      {
        "id": 1,
        "tag": "p",
        "content": "Lors de la mise en production de la refonte d’Azaé.com, nous avons constaté que WordPress atteignait ses limites techniques. En effet, cet environnement manque de souplesse pour le développement (dockerisation complexe, ralentissements, mises à jour de plugins délicates, base de données compliquée…)."
      },
      {
        "id": 2,
        "tag": "p",
        "content": "Nous avons donc envisagé plusieurs solutions :"
      },
      {
        "id": 3,
        "tag": "ul",
        "items": [
          {
            "id": 1,
            "tag": "li",
            "content": "Passer à un autre CMS plus performant (Drupal)"
          },
          {
            "id": 2,
            "tag": "li",
            "content": "Adopter un WordPress Headless (permettant un front en VueJS, résolvant les problèmes de performances mais pas les autres)"
          },
          {
            "id": 3,
            "tag": "li",
            "content": "Utiliser un CMS Laravel"
          },
          {
            "id": 4,
            "tag": "li",
            "content": "Créer notre propre CMS Laravel"
          }
        ]
      },
      {
        "id": 4,
        "tag": "p",
        "content": "Nous avons finalement opté pour Laravel. Cette décision a conduit à une nouvelle analyse des différents produits existants sur le marché (Statamic, Lavalite, Winter, October…). À l'issue de cette analyse, nous avons décidé de développer notre propre CMS de A à Z. En effet, beaucoup de ces CMS stockent les pages directement sous forme de templates et non en base de données, ce qui est pour nous indispensable."
      },
      {
        "id": 5,
        "tag": "p",
        "content": "J’ai donc commencé par structurer les tables sous Miro afin de partager le projet avec l’équipe et prendre en compte les différents besoins (par exemple, les métadonnées nécessaires au SEO)."
      },
      {
        "id": 6,
        "tag": "p",
        "content": "Une fois cette étape validée par le lead développeur, Léo Imbs, j’ai créé l'environnement Laravel-VueJS. J’ai choisi Laravel avec JetStream pour gérer l’authentification et l’authentification à double facteur, ainsi qu'Inertia avec Server Side Rendering (SSR) pour le front en VueJS."
      },
      {
        "id": 7,
        "tag": "p",
        "content": "Le SSR permet au serveur de délivrer des pages pré-calculées au lieu de JavaScript à compiler côté client. Cela réduit la bande passante nécessaire, accélère les chargements, et surtout, permet aux robots d’indexer le site. À mon avis, le plus grand défi de ce développement est la performance SEO."
      },
      {
        "id": 8,
        "tag": "p",
        "content": "Finalement, j’ai dockerisé le projet avec Laravel Sail pour permettre à mes collègues de travailler efficacement dessus. Ce projet a deux volets : le développement et la maintenance du CMS, et la création de sites avec celui-ci. La dockerisation rend le développement plus flexible, permet de cloner le projet pour d'autres constructions, et de cloner le site en cas de forte affluence pour offrir une expérience optimale."
      },
      {
        "id": 9,
        "tag": "p",
        "content": "Piloter l’aspect technique de ce produit m’a offert une nouvelle perspective sur le développement. Jusqu’à présent, je développais uniquement des services en réponse aux demandes de mes collègues. Maintenant, je dois anticiper et intégrer leurs besoins divers et spécifiques. Assurer la qualité et la pertinence des outils et technologies utilisés est crucial avant même d'initier le développement."
      },
      {
        "id": 10,
        "tag": "p",
        "content": "De plus, nous souhaitons rendre nos sites plus respectueux de l'environnement et plus accessibles, des paramètres tout aussi importants."
      },
      {
        "id": 11,
        "tag": "ul",
        "items": [
          {
            "id": 1,
            "tag": "li",
            "content": "Le développement du squelette back-end (en cours)"
          },
          {
            "id": 2,
            "tag": "li",
            "content": "Le développement des fonctionnalités avancées (éditeur WYSIWYG, constructeur de pages similaire à Elementor…)"
          },
          {
            "id": 3,
            "tag": "li",
            "content": "Le développement des outils de gestion propres aux besoins de nos spécialistes"
          }
        ]
      },
      {
        "id": 12,
        "tag": "p",
        "content": "Une fois ces trois phases achevées, nous pourrons entamer la refonte d’un de nos sites."
      }
    ],
    "1": [
      {
        "id": 0,
        "tag": "h2",
        "content": "Refonte du Back-end de Domaliance"
      },
      {
        "id": 1,
        "tag": "p",
        "content": "Cette refonte poursuit trois objectifs principaux : sécuriser, optimiser et fiabiliser le site."
      },
      {
        "id": 2,
        "tag": "h3",
        "content": "1. Sécurisation du site :"
      },
      {
        "id": 3,
        "tag": "p",
        "content": "La sécurisation du site a été renforcée grâce à la mise en place de variables d'environnement. Ces variables sont essentielles pour stocker des informations sensibles de manière sécurisée. Par exemple, des mots de passe, des tokens d'authentification, ou même des informations spécifiques à la marque du site peuvent être stockées dans ces variables."
      },
      {
        "id": 4,
        "tag": "p",
        "content": "Ces variables ne sont pas suivies sur le dépôt Git, ce qui empêche toute fuite accidentelle d'informations sensibles. Cela garantit que même si le code source est partagé ou rendu public, les informations critiques ne sont jamais exposées."
      },
      {
        "id": 5,
        "tag": "h3",
        "content": "2. Optimisation du site :"
      },
      {
        "id": 6,
        "tag": "p",
        "content": "L'optimisation a nécessité une révision en profondeur du code. Initialement, le site contenait des fichiers de fonctions PHP de plusieurs milliers de lignes, souvent dupliquées entre différents plugins. Cette redondance augmentait la complexité du maintien et de la mise à jour du code."
      },
      {
        "id": 7,
        "tag": "h4",
        "content": "Utilisation de classes spécifiques :"
      },
      {
        "id": 8,
        "tag": "p",
        "content": "Toutes les fonctions redondantes ont été extraites et regroupées dans des classes spécifiques. Par exemple, pour obtenir la note d'un service, il suffit maintenant d'appeler une méthode de la classe “ReviewsDataFetcher”. Cela permet une meilleure organisation du code, une réutilisation efficace des fonctions et une réduction de la redondance."
      },
      {
        "id": 9,
        "tag": "h4",
        "content": "Procédures stockées :"
      },
      {
        "id": 10,
        "tag": "p",
        "content": "En parallèle, des procédures stockées ont été mises en place pour remplacer les requêtes SQL directes. Les procédures stockées sont exécutées directement par le serveur de base de données, offrant des performances améliorées et une sécurité accrue par rapport aux requêtes SQL traditionnelles."
      },
      {
        "id": 11,
        "tag": "h3",
        "content": "3. Fiabilisation du site :"
      },
      {
        "id": 12,
        "tag": "p",
        "content": "Pour améliorer les performances et la fiabilité, la taille des fichiers JavaScript a été réduite. Seul le code essentiel est conservé, ce qui allège la charge de traitement côté client."
      },
      {
        "id": 13,
        "tag": "p",
        "content": "Lorsqu'une requête AJAX est effectuée, le traitement est géré par des classes PHP sur le serveur Apache. Cette approche garantit que les données sensibles ne sont jamais exposées à la console du navigateur."
      },
      {
        "id": 14,
        "tag": "p",
        "content": "n utilisant cette méthode, le tableau des données envoyé par notre API (Ozone) est sécurisé. Les données ne transitent pas de manière brute vers le client, ce qui assure la qualité et l'authenticité des informations fournies aux utilisateurs finaux."
      },
      {
        "id": 15,
        "tag": "p",
        "content": "En résumé, la refonte du back-end de Domaliance a permis de sécuriser les informations sensibles, d'optimiser l'architecture du code pour une meilleure performance et maintenabilité, et de fiabiliser le processus de traitement des données pour garantir leur qualité et authenticité."
      }
    ],
    "2": [
      {
        "id": 0,
        "tag": "h2",
        "content": "Mise en place de l'Intégration Continue et du Développement Continu (CI/CD)"
      },
      {
        "id": 1,
        "tag": "p",
        "content": "Le développement de nos sites a longtemps été chaotique à plusieurs niveaux. Par exemple, nous étions contraints de faire nos modifications en FTP sur les environnements de préproduction, et nous avions deux projets Git distincts pour les environnements de préproduction et de production. Ces problèmes nous ont fait perdre beaucoup de temps et ont généré de nombreux bugs qui auraient pu être évités."
      },
      {
        "id": 2,
        "tag": "p",
        "content": "Pour remédier à ces difficultés, Michaël Stark, le responsable du pôle Web R&D, nous a proposé de mettre en place une solution d'Intégration Continue et de Développement Continu (CI/CD) pour nos sites. Après qu'il nous ait expliqué le fonctionnement des GitHub Actions, Léo Imbs et moi-même avons implémenté les scripts nécessaires sur les environnements de préproduction et de production."
      },
      {
        "id": 3,
        "tag": "p",
        "content": "Grâce à la mise en place du CI/CD, nous n'avons désormais plus qu'un seul projet Git par site, sans pour autant devoir pousser toutes nos modifications directement en production. En effet, les modifications ne peuvent être déployées en production que si le commit à pousser possède un tag de type \"x.x.x.x\" (les \"x\" étant numériques)."
      },
      {
        "id": 4,
        "tag": "p",
        "content": "Cette méthode de travail a simplifié notre workflow de manière significative, et il nous est désormais difficile d'imaginer revenir en arrière. Le CI/CD a non seulement amélioré notre efficacité, mais aussi réduit les risques de bugs, rendant notre processus de développement beaucoup plus fiable et fluide."
      }
    ],
    "3": [
      {
        "id": 0,
        "tag": "h2",
        "content": "Développement d'une application mobile Flutter"
      },
      {
        "id": 1,
        "tag": "p",
        "content": "J'ai eu l'opportunité de concevoir plusieurs applications intégrant des dispositifs interactifs sophistiqués, telles que \"Acab Locator\" développée en Flutter. Cette application permet aux utilisateurs de photographier des graffitis ACAB et de les géolocaliser. Pour assurer la sécurité et la fiabilité des données, j'ai mis en place un système d'authentification géré par Firebase, un service de Google."
      },
      {
        "id": 2,
        "tag" : "a",
        "content": "https://github.com/AgatheTheCode/AcabLocatorApp"
      }
    ]
  }
}
